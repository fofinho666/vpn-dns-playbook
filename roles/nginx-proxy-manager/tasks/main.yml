---
- name: Create the folders
  file:
    path: "{{ docker_dir }}/{{ item }}"
    state: directory
    recurse: yes
  loop:
    - nginx-proxy-manager/letsencrypt
    - nginx-proxy-manager/data
    - nginx-proxy-manager/snippets

- name: Copy nginx snippets
  copy:
    src: snippets/
    dest: "{{ docker_dir }}/nginx-proxy-manager/snippets"

- name: Build and copy authelia-authrequest.conf
  template:
    src: snippets/authelia-authrequest.conf
    dest: "{{ docker_dir }}/nginx-proxy-manager/snippets"

- name: Build and copy .env file
  template:
    src: .env
    dest: "{{ docker_dir }}/nginx-proxy-manager/.env"

- name: Make sure Nginx Proxy Manager container is created and running
  docker_container:
    name: nginx-proxy-manager
    image: jc21/nginx-proxy-manager:latest
    networks:
      - name: docker_network
        ipv4_address: "{{ nginx_proxy_manager.docker_address }}"
    pull: yes
    restart: yes
    state: started
    env_file: "{{ docker_dir }}/nginx-proxy-manager/.env"
    ports:
      - "{{ http_port }}:80"
      - "{{ https_port }}:443"
      - "{{ nginx_proxy_manager.forward_port }}:81"
    volumes:
      - "{{ docker_dir }}/nginx-proxy-manager/data:/data"
      - "{{ docker_dir }}/nginx-proxy-manager/snippets:/snippets"
      - "{{ docker_dir }}/nginx-proxy-manager/letsencrypt:/etc/letsencrypt"
    restart_policy: unless-stopped

- name: Install SQLite3
  apt:
    name: sqlite3
    state: present

- name: Check if SQL script with default data status
  stat:
    path: "{{ docker_dir }}/nginx-proxy-manager/data/default_data.sql"
  register: default_data_file

- name: Build and copy SQL script with default data
  template:
    src: default_data.sql
    dest: "{{ docker_dir }}/nginx-proxy-manager/data/default_data.sql"
  when: not default_data_file.stat.exists
  
- name: Restore the default data
  shell: sqlite3 database.sqlite < default_data.sql
  args:
    chdir: "{{ docker_dir }}/nginx-proxy-manager/data/"
  when: not default_data_file.stat.exists
